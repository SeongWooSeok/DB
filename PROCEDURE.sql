/*PL/SQL (prodedural language extention to SQL) SQL 확장 절차 언어
    Procedure:리턴 값이 하나 이상인 경우
    Function: 리턴 반드시 있는 경우(input / output)
    Trigger: 특정한 이벤트 발생 자동으로 실행
    
    package: 프로시저, 함수, 변수 등을 묶어 놓은 것
=======================================
    선언부
    DECLARE
        변수 상수 커서 값 선언 부분 //선택
    실행부
    BEGIN
        절차적 언어 제어문, 반복문, 함수 로직이 기술//필수
    예외 처리부
    EXCEPTION
        예외사항 처리하는 부분//선택
    실행문 종료부
    END
        끝//필수
==================================
    DBMS_OUTPUT.PUT_LINE(출력내용)
    
변수명 상수지정 데이터타입 리터럴,변수,표현식(함수, 연산자)
IDENRIFIER [CONSTANT] DATATYPE [:= | DEFAULT EXPRESSION ]
PASSWORD CONSTANT VARCHAR2 :='23412';
PASSWORD CONSTANT VARCHAR2 DEFAULT '1234';

반복문
FOR INDEX IN 시작값..끝값 LOOP
    실행문
    ...
END LOOP;

LOOP
    실행문
    EXIT [WHEN CONDITION]
END LOOP;
*/
CREATE OR REPLACE PROCEDURE PROCTEST1 
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;

CREATE OR REPLACE PROCEDURE PROCTEST2(NUM IN NUMBER)
IS
    V_EMPNO CONSTANT NUMBER(4) := 7788;
    V_ENAME VARCHAR(10);
BEGIN
    V_ENAME := 'SCOTT';
    --V_EMPNO := 1234;
    DBMS_OUTPUT.PUT_LINE('V_ENAME:'||V_ENAME);
    DBMS_OUTPUT.PUT_LINE('V_EMPNO:'||V_EMPNO);
END;

CREATE OR REPLACE PROCEDURE PROCTEST3
IS
    DATA EMP%ROWTYPE;
    V_ENAME EMP.ENAME%TYPE;
    V_DEPTNO EMP.DEPTNO%TYPE;
BEGIN
    SELECT * INTO DATA
    FROM EMP
    WHERE EMPNO='7369';
    SELECT ENAME,DEPTNO INTO V_ENAME,V_DEPTNO
    FROM EMP
    WHERE EMPNO='7499';
    DBMS_OUTPUT.PUT_LINE(DATA.ENAME||','||DATA.DEPTNO);
    DBMS_OUTPUT.PUT_LINE(V_ENAME||','||V_DEPTNO);
END;

CREATE OR REPLACE PROCEDURE PROCTEST4 AS
BEGIN
    FOR I IN 1..4
    LOOP
        IF MOD(I,2)=0 THEN DBMS_OUTPUT.PUT_LINE(I||'짝수');
        ELSE DBMS_OUTPUT.PUT_LINE(I||'홀수');
        END IF;
    END LOOP;
    FOR LIST IN(SELECT EMPNO FROM EMP)
    LOOP
        IF MOD(LIST.EMPNO,2)=0 THEN 
            DBMS_OUTPUT.PUT_LINE(LIST.EMPNO||'짝수');
        ELSE DBMS_OUTPUT.PUT_LINE(LIST.EMPNO||'홀수');
        END IF;
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE PROCTEST5
IS
    V_NUM NUMBER :=1;
    V_SUM NUMBER :=0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('NOW'||V_NUM);
        V_SUM:=V_SUM+V_NUM;
        V_NUM:=V_NUM+1;
        EXIT WHEN V_NUM>10;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('SUM:'||V_SUM);
    V_SUM:=0;
    FOR I IN 1..10 LOOP
        CONTINUE WHEN MOD(I,2)=0;
        V_SUM:=V_SUM+I;
        --EXIT WHEN I=3;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('SUM:'||V_SUM);
    V_NUM:=1;
    V_SUM:=0;
    WHILE V_NUM<11
    LOOP
        V_SUM:=V_SUM+V_NUM;
        V_NUM:=V_NUM+1;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('SUM:'||V_SUM);
END PROCTEST5;

CREATE OR REPLACE PROCEDURE PROCTEST6 
IS
    V_SCORE NUMBER:=81;
    V_GRADE CHAR(1):='C';
    V_REWARD VARCHAR2(20);
BEGIN
    DBMS_OUTPUT.PUT_LINE('SCORE:'||V_SCORE);
    IF V_SCORE >= 90 THEN V_GRADE:='A';
    ELSIF V_SCORE >= 80 THEN V_GRADE:='B';
    ELSIF V_SCORE >= 70 THEN V_GRADE:='C';
    ELSIF V_SCORE >= 60 THEN V_GRADE:='D';
    ELSE V_GRADE:='F';
    END IF;
    V_REWARD:=CASE V_GRADE
        WHEN 'A' THEN 'EXCELLENT'
        WHEN 'B' THEN 'VERY GOOD'
        WHEN 'C' THEN 'GOOD'
        ELSE 'NORMAL'
        END;
    DBMS_OUTPUT.PUT_LINE('GRADE:'||V_GRADE||' '||V_REWARD);
END PROCTEST6;

CREATE OR REPLACE PROCEDURE PROCTEST7 AS 
BEGIN
--구구단 출력
    FOR I IN 2..9 LOOP
        CONTINUE WHEN I=8;
        FOR J IN 1..9 LOOP
            CONTINUE WHEN J=4;
            DBMS_OUTPUT.PUT_LINE(I||'X'||J||'='||(I*J));
        END LOOP;
        DBMS_OUTPUT.PUT_LINE(' ');
    END LOOP;
END PROCTEST7;

CREATE OR REPLACE PROCEDURE PROC_AURG (
    V_NAMEIN IN VARCHAR2 
    , V_NAMEOUT OUT VARCHAR2 
    , P_EMPNO IN NUMBER 
    , P_DEPTNO IN NUMBER 
    , P_ENAME OUT VARCHAR2 
    , P_DNAME OUT VARCHAR2 
    , P_RES_CODE OUT NUMBER 
)
IS
    CURSOR CHECKEMP IS
    SELECT E.ENAME,D.DNAME FROM EMP E,DEPT D
    WHERE E.DEPTNO=D.DEPTNO 
    AND E.EMPNO=P_EMPNO AND D.DEPTNO=P_DEPTNO;
BEGIN
    DBMS_OUTPUT.PUT_LINE(V_NAMEIN||'님 안녕하세요.');
    V_NAMEOUT:=V_NAMEIN;
    DBMS_OUTPUT.PUT_LINE('사번:'||P_EMPNO);
    DBMS_OUTPUT.PUT_LINE('소속 부서:'||P_DEPTNO);
    OPEN CHECKEMP;
    FETCH CHECKEMP INTO P_ENAME,P_DNAME;
    --%FOUND 조회 결과가 1개 이상인 경우 TRUE
    --%NOTFOUND 조회 결과가 0개인 경우 TRUE
    --%ROWCOUNT 쿼리 수행 결과의 행수
    IF CHECKEMP%FOUND THEN P_RES_CODE:=1000;
    ELSE P_RES_CODE:=2000;
    END IF;
    CLOSE CHECKEMP;
END PROC_AURG;

--DECLARE
--  V_NAMEIN VARCHAR2(200);
--  V_NAMEOUT VARCHAR2(200);
--  P_EMPNO NUMBER;
--  P_DEPTNO NUMBER;
--  P_ENAME VARCHAR2(200);
--  P_DNAME VARCHAR2(200);
--  P_RES_CODE NUMBER;
--BEGIN
--  V_NAMEIN := 'TESTER';
--  P_EMPNO := 7702;
--  P_DEPTNO := 10;
--
--  PROC_AURG(V_NAMEIN,V_NAMEOUT,P_EMPNO,P_DEPTNO,P_ENAME,P_DNAME,P_RES_CODE );
--  IF P_RES_CODE=1000 THEN
--    DBMS_OUTPUT.PUT_LINE('ENAME:'||P_ENAME);
--    DBMS_OUTPUT.PUT_LINE('DNAME:'||P_DNAME);
--  ELSE
--    DBMS_OUTPUT.PUT_LINE('존재하지 않습니다.'||P_RES_CODE);
--  END IF;
--END;

CREATE TABLE DEPT_CONST
AS SELECT * FROM DEPT WHERE 1<>1;

CREATE OR REPLACE PROCEDURE PROC_RECORD
IS
    TYPE R_DEPT IS RECORD(
        DEPTNO NUMBER(2) NOT NULL :=99,
        DNAME DEPT.DNAME%TYPE,
        LOC DEPT.LOC%TYPE
    );
    TYPE R_EMP IS RECORD(
        EMPNO EMP.EMPNO%TYPE,
        ENAME EMP.ENAME%TYPE,
        DINFO R_DEPT
    );
    D_REC R_DEPT;
    E_REC R_EMP;
BEGIN
--    D_REC.DEPTNO:= 99;
--    D_REC.DNAME:='DATABASE';
--    D_REC.LOC:='SEOUL';
--    DBMS_OUTPUT.PUT_LINE('부서번호:'||D_REC.DEPTNO);
--    DBMS_OUTPUT.PUT_LINE('부서명:'||D_REC.DNAME);
--    DBMS_OUTPUT.PUT_LINE('위치:'||D_REC.LOC);
--    INSERT INTO DEPT_CONST VALUES D_REC;
--    
--    D_REC.DEPTNO:= 50;
--    D_REC.DNAME:='DB';
--    D_REC.LOC:='BUSAN';
--    
--    UPDATE DEPT_CONST 
--    SET ROW=D_REC 
--    WHERE DEPTNO=99;

    SELECT E.EMPNO,E.ENAME,D.DEPTNO,D.DNAME,D.LOC
    INTO E_REC.EMPNO,E_REC.ENAME
        ,E_REC.DINFO.DEPTNO,E_REC.DINFO.DNAME,E_REC.DINFO.LOC
    FROM EMP E,DEPT D
    WHERE E.DEPTNO=D.DEPTNO
    AND E.EMPNO=7844;
    DBMS_OUTPUT.PUT_LINE(E_REC.EMPNO||E_REC.ENAME);
    DBMS_OUTPUT.PUT_LINE(E_REC.DINFO.DEPTNO||E_REC.DINFO.DNAME);
    DBMS_OUTPUT.PUT_LINE(E_REC.DINFO.LOC);
END PROC_RECORD;

DROP TABLE EMP_CURSOR;
CREATE TABLE EMP_CURSOR
AS SELECT * FROM EMP;
SELECT * FROM EMP_CURSOR;
INSERT INTO EMP_CURSOR(EMPNO,ENAME,DEPTNO) VALUES(7701,'TIGER',10);
COMMIT;

CREATE OR REPLACE PROCEDURE PROC_EXCEPTION
IS
    V_NUM NUMBER;
    V_RES NUMBER;
    RICH_EXCEPTION EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_RES FROM EMP WHERE SAL>2500;
    IF V_RES < 0 THEN 
        RAISE RICH_EXCEPTION;
    END IF;
    SELECT EMPNO INTO V_NUM
    FROM EMP_CURSOR WHERE EMPNO=7703;--7702 NO DATA--7701 ROW NUMBER
    SELECT DEPTNO INTO V_NUM --DNAME 문자->숫자 VALUE ERR
    FROM DEPT WHERE DEPTNO = 10;
    V_NUM:=10;
    V_RES:=V_NUM/0;
    DBMS_OUTPUT.PUT_LINE(V_NUM);
    DBMS_OUTPUT.PUT_LINE(V_RES);
EXCEPTION
    WHEN ZERO_DIVIDE THEN 
        V_RES:=0;
        DBMS_OUTPUT.PUT_LINE('0으론 못나눠요.'||TO_CHAR(SQLCODE)||SQLERRM);
    WHEN VALUE_ERROR THEN 
        DBMS_OUTPUT.PUT_LINE('예외처리:수치 값 오류'||TO_CHAR(SQLCODE)||SQLERRM);
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE('해당사항 없음.'||TO_CHAR(SQLCODE)||SQLERRM);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('두명 이상입니다.'||TO_CHAR(SQLCODE)||SQLERRM);
    WHEN RICH_EXCEPTION THEN 
        DBMS_OUTPUT.PUT_LINE('RICH EXCEPTION '||TO_CHAR(SQLCODE)||SQLERRM);
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('예외처리');
END PROC_EXCEPTION;

CREATE OR REPLACE PROCEDURE PROC_CURSOR
IS
    --CURSOR 생성
    CURSOR EMP_CUR IS
    SELECT * FROM EMP WHERE DEPTNO=10;
    
    CURSOR EMP_SIN IS
    SELECT * FROM EMP WHERE EMPNO=7369;
    
    EMP_LOC EMP%ROWTYPE;
BEGIN
    DELETE FROM EMP_CURSOR WHERE DEPTNO=10;
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
    --생성 커서를 사용 OPEN->FETCH->CLOSE
    OPEN EMP_CUR;
    LOOP
    FETCH EMP_CUR INTO EMP_LOC;
    EXIT WHEN EMP_CUR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(EMP_LOC.EMPNO||','||EMP_LOC.ENAME);
    END LOOP;
    CLOSE EMP_CUR;
    OPEN EMP_SIN;
    FETCH EMP_SIN INTO EMP_LOC;
    DBMS_OUTPUT.PUT_LINE(EMP_LOC.EMPNO||','
                    ||EMP_LOC.ENAME||EMP_LOC.JOB);
    CLOSE EMP_SIN;
    
    FOR TEMP IN EMP_CUR LOOP
    DBMS_OUTPUT.PUT_LINE(TEMP.EMPNO||','
                    ||TEMP.ENAME||','||TEMP.DEPTNO);
    END LOOP;
    
    FOR TEMP1 IN(SELECT * FROM EMP WHERE DEPTNO=20) LOOP
    DBMS_OUTPUT.PUT_LINE(TEMP1.EMPNO||','
                    ||TEMP1.ENAME||','||TEMP1.SAL);
    END LOOP;
END PROC_CURSOR;




    
    
    
    
    
    
    
    
